generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    password      String?
    username      String?    @unique
    email         String?   @unique
    image         String?
    bio           String?   @db.Text
    emailVerified DateTime?

    accounts     Account[]
    sessions     Session[]
    posts        Post[]
    comments     Comment[]
    likes        Like[]
    retweets     Retweet[]
    messagesSent Message[] @relation("MessagesSent")
    messagesRecv Message[] @relation("MessagesRecv")
    followers    Follow[]  @relation("Following")
    following    Follow[]  @relation("Follower")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    File      File[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        String    @id @default(cuid())
    content   String    @db.Text
    image     String?
    published Boolean   @default(false)
    authorId  String
    likes     Like[]
    retweets  Retweet[]
    comments  Comment[]
    files     File[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

    @@index([authorId])
}

model Comment {
    id        String   @id @default(cuid())
    content   String   @db.Text
    postId    String
    authorId  String
    createdAt DateTime @default(now())

    post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}

model Retweet {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
}

model Follow {
    id          String   @id @default(cuid())
    followerId  String
    followingId String
    createdAt   DateTime @default(now())

    follower  User @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
}

model Message {
    id         String   @id @default(cuid())
    senderId   String
    receiverId String
    content    String   @db.Text
    createdAt  DateTime @default(now())

    sender   User   @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User   @relation("MessagesRecv", fields: [receiverId], references: [id], onDelete: Cascade)
    File     File[]
}

model File {
    id            String  @id @default(uuid())
    name          String
    path          String
    cloudinaryUrl String?
    publicId      String?
    size          Int
    userId        String
    folderId      String?

    postId    String? 
    messageId String? 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User     @relation(fields: [userId], references: [id])
    post    Post?    @relation(fields: [postId], references: [id])
    message Message? @relation(fields: [messageId], references: [id])
}
